The ``2-matrix_divided`` module
============================

Usage
-----

```matrix_divided(matrix, div)``` divides all elements of a matrix by div, creating
a new matrix with the result rounded to 2 decimal places

Examples
--------

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 1)
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

# Divide each element of a 2x2 matrix by 2
>>> matrix = [[2, 4], [6, 8]]
>>> matrix_divided(matrix, 2)
[[1.0, 2.0], [3.0, 4.0]]

# Divide each element of a 3x3 matrix by 3
>>> matrix = [[9, 12, 15], [18, 21, 24], [27, 30, 33]]
>>> matrix_divided(matrix, 3)
[[3.0, 4.0, 5.0], [6.0, 7.0, 8.0], [9.0, 10.0, 11.0]]

# Divide each element of a 1x1 matrix by 1
>>> matrix = [[5]]
>>> matrix_divided(matrix, 1)
[[5.0]]

# Divide each element of a matrix by a non-number value
>>> matrix = [[9, 12, 15], [18, 21, 24], [27, 30, 33]]
>>> matrix_divided(matrix, "pantoufle")
Traceback (most recent call last):
TypeError: div must be a number

# Divide each element by 0
>>> matrix = [[9, 12, 15], [18, 21, 24], [27, 30, 33]]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

# Divide a non-valid matrix by 3
>>> matrix = [[9, 12, 15], [18, 21], [27, 30, 33]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

# Divide a list (not a matrix) by 3
>>> matrix = [1, 2]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Divide a matrix with an empty row by 3
>>> matrix = [[9, 12, 15], [], [27, 30, 33]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

# Divide a matrix containing a string element by 3
>>> matrix = [[9, 12, 15], [18, 21, 24], [27, "30", 33]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Divide None by 3
>>> matrix = None
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Divide an empty list by 3
>>> matrix = []
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# No argument given to method
>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

# Missing an argument
>>> matrix = [[9, 12, 15], [18, 21, 24], [27, "30", 33]]
>>> matrix_divided(matrix)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

# Divide a matrix by None
>>> matrix = [[9, 12, 15], [18, 21, 24], [27, "30", 33]]
>>> matrix_divided(matrix, None)
Traceback (most recent call last):
TypeError: div must be a number

# Checking that new matrix length is the same
>>> matrix = [[10, 8], [5, 10]]
>>> div = 2
>>> len(matrix_divided(matrix, div)) == len(matrix)
True

# Dividing by infinite float value
>>> matrix = [[2, 4, 6], [8, 12, 16]]
>>> matrix_divided(matrix, float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
