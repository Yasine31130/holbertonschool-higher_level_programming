The ``0-add_integer`` module
============================

Usage
-----

```add_integer(a, b)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

Examples
--------

>>> add_integer = __import__('0-add_integer').add_integer

>>> add_integer(1, 2)
3

>>> add_integer(100, -2)
98

>>> add_integer(3.14, 69)
72

>>> add_integer(69, 3.14)
72

>>> add_integer(1.12, 3.14)
4

>>> add_integer(3)
101

>>> add_integer()
Traceback (most recent call last):
TypeError: add_integer() missing 1 required positional argument: 'a'

>>> add_integer("3", 5)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(3, "5")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer("Domain", "expansion")
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2.3, None)
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(float('inf'), 3)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(float('nan'), 3)
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer